from __future__ import annotations

from datetime import timedelta
import logging

from homeassistant.components.sensor import PLATFORM_SCHEMA, SensorEntity
from homeassistant.const import CONF_MODE, TIME_MINUTES
import homeassistant.helpers.config_validation as cv

from homeassistant.components.climate import ClimateEntity
from homeassistant.core import HomeAssistant
from homeassistant.helpers.entity_platform import AddEntitiesCallback
from homeassistant.helpers.typing import ConfigType, DiscoveryInfoType
from homeassistant.helpers.update_coordinator import (
	CoordinatorEntity,
	DataUpdateCoordinator,
	UpdateFailed
)

import trentbarton

from . import DOMAIN

_LOGGER = logging.getLogger(__name__)


async def async_setup(hass: HomeAssistant, config: ConfigType) -> bool:
	# https://community.home-assistant.io/t/new-platform-for-fan-passing-config-from-component-to-platform/136619/3
	load_platform(hass, 'sensor', DOMAIN, {
		CONF_SERVICE: config[DOMAIN][CONF_SERVICE],
		CONF_STOPID: config[DOMAIN][CONF_STOPID],
		CONF_NUMBUSES: config[DOMAIN][CONF_NUMBUSES]
	}, config)
	return True



async def async_setup_platform(
	hass: HomeAssistant,
	config: ConfigType,
	async_add_entities: AddEntitiesCallback,
	discovery_info: DiscoveryInfoType | None = None,
) -> None:

	service = discovery_info[CONF_SERVICE]
	stopid = discovery_info[CONF_STOPID]
	numbuses = discovery_info[CONF_NUMBUSES]

	service = trentbarton.Service.get_service(service)
	stops = service.get_stops()
	for stop in stops:
		if stop.stop_id == config.get(stopid):
			our_stop = stop
			break

	sensorEntities = []

	async def async_update_data():
		# Note: asyncio.TimeoutError and aiohttp.ClientError are already
		# handled by the data update coordinator.
		return our_stop.get_live_times()

	def update_entities():
		i = 0
		for entity in sensorEntities:
			if len(coordinator.data) > i:
				entity.setValues(coordinator.data[i])
			# else
			#	entity.setValues(Bus)
			entity.async_write_ha_state()

	coordinator = DataUpdateCoordinator(
		hass,
		_LOGGER,
		# Name of the data. For logging purposes.
		name = "buses",
		update_method = async_update_data,
		# Polling interval. Will only be polled if there are subscribers.
		update_interval = timedelta(seconds = 60)
	)

	coordinator.async_add_listener(update_entities)

	await coordinator.async_config_entry_first_refresh()

	i = 0
	for bus in coordinator.data:
		if i == numbuses:
			break
		sensor = BusSensor(coordinator, bus)
		sensorEntities.append(sensor)
		i += 1
	async_add_entities(sensorEntities)



class BusSensor(CoordinatorEntity, SensorEntity):

	_attr_icon = "mdi:bus"
	_attr_native_unit_of_measurement = TIME_MINUTES

	def __init__(self, coordinator, name):
		super().__init__(coordinator)
		self._data = {}
		self._name = name

	@property
	def name(self):
		return self._name

	@property
	def native_value(self):
		return self._bus.due

	def setValues(self, bus: trentbarton.Bus):
		self._bus = bus
